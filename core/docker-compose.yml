version: "3.8"

services:
  db:
    image: postgres:15
    container_name: postgres_db
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=${DB_NAME}
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    ports:
      - "5432:5432"
    networks:
      - app_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 5s
      timeout: 5s
      retries: 5

  redis:
    image: redis:latest
    container_name: redis_cache
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --requirepass ${REDIS_PASSWORD} --appendonly yes
    restart: always
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 5s
      timeout: 3s
      retries: 3
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    networks:
      - app_network

  web:
    build: .
    container_name: django_app
    ports:
      - "8000:8000"
    volumes:
      - .:/app
      - logs:/app/logs
    working_dir: /app
    environment:
      - PYTHONPATH=/app
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_HOST=db
      - DB_PORT=5432
    restart: always
    depends_on:
      redis:
        condition: service_healthy
      db:
        condition: service_healthy
    networks:
      - app_network

  cron:
    build: .
    container_name: django_cron
    volumes:
      - .:/app
      - logs:/app/logs
    working_dir: /app
    environment:
      - PYTHONPATH=/app
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_HOST=db
      - DB_PORT=5432
    command: >
      bash -c "apt-get update && apt-get install -y cron && 
      service cron start && 
      python manage.py crontab add && 
      tail -f /dev/null"
    depends_on:
      - web
    networks:
      - app_network

networks:
  app_network:
    driver: bridge

volumes:
  postgres_data:
    name: postgres_data
  redis_data:
    name: redis_data
  logs:
    name: app_logs
